//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.0
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Xapian {

public class PostingSource : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal PostingSource(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PostingSource obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(PostingSource obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~PostingSource() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          XapianPINVOKE.delete_PostingSource(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public PostingSource() : this(XapianPINVOKE.new_PostingSource(), true) {
    if (XapianPINVOKE.SWIGPendingException.Pending) throw XapianPINVOKE.SWIGPendingException.Retrieve();
    SwigDirectorConnect();
  }

  public virtual uint GetTermfreqMin() {
    uint ret = XapianPINVOKE.PostingSource_GetTermfreqMin(swigCPtr);
    if (XapianPINVOKE.SWIGPendingException.Pending) throw XapianPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual uint GetTermfreqEst() {
    uint ret = XapianPINVOKE.PostingSource_GetTermfreqEst(swigCPtr);
    if (XapianPINVOKE.SWIGPendingException.Pending) throw XapianPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual uint GetTermfreqMax() {
    uint ret = XapianPINVOKE.PostingSource_GetTermfreqMax(swigCPtr);
    if (XapianPINVOKE.SWIGPendingException.Pending) throw XapianPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetMaxweight(double max_weight) {
    XapianPINVOKE.PostingSource_SetMaxweight(swigCPtr, max_weight);
    if (XapianPINVOKE.SWIGPendingException.Pending) throw XapianPINVOKE.SWIGPendingException.Retrieve();
  }

  public double GetMaxweight() {
    double ret = XapianPINVOKE.PostingSource_GetMaxweight(swigCPtr);
    if (XapianPINVOKE.SWIGPendingException.Pending) throw XapianPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double GetWeight() {
    double ret = (SwigDerivedClassHasMethod("GetWeight", swigMethodTypes3) ? XapianPINVOKE.PostingSource_GetWeightSwigExplicitPostingSource(swigCPtr) : XapianPINVOKE.PostingSource_GetWeight(swigCPtr));
    if (XapianPINVOKE.SWIGPendingException.Pending) throw XapianPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual uint GetDocId() {
    uint ret = XapianPINVOKE.PostingSource_GetDocId(swigCPtr);
    if (XapianPINVOKE.SWIGPendingException.Pending) throw XapianPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void Next(double min_wt) {
    XapianPINVOKE.PostingSource_Next(swigCPtr, min_wt);
    if (XapianPINVOKE.SWIGPendingException.Pending) throw XapianPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void SkipTo(uint did, double min_wt) {
    if (SwigDerivedClassHasMethod("SkipTo", swigMethodTypes6)) XapianPINVOKE.PostingSource_SkipToSwigExplicitPostingSource(swigCPtr, did, min_wt); else XapianPINVOKE.PostingSource_SkipTo(swigCPtr, did, min_wt);
    if (XapianPINVOKE.SWIGPendingException.Pending) throw XapianPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual bool Check(uint did, double min_wt) {
    bool ret = (SwigDerivedClassHasMethod("Check", swigMethodTypes7) ? XapianPINVOKE.PostingSource_CheckSwigExplicitPostingSource(swigCPtr, did, min_wt) : XapianPINVOKE.PostingSource_Check(swigCPtr, did, min_wt));
    if (XapianPINVOKE.SWIGPendingException.Pending) throw XapianPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool AtEnd() {
    bool ret = XapianPINVOKE.PostingSource_AtEnd(swigCPtr);
    if (XapianPINVOKE.SWIGPendingException.Pending) throw XapianPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual string Name() {
    string ret = (SwigDerivedClassHasMethod("Name", swigMethodTypes9) ? XapianPINVOKE.PostingSource_NameSwigExplicitPostingSource(swigCPtr) : XapianPINVOKE.PostingSource_Name(swigCPtr));
    if (XapianPINVOKE.SWIGPendingException.Pending) throw XapianPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void Init(Database db) {
    XapianPINVOKE.PostingSource_Init(swigCPtr, Database.getCPtr(db));
    if (XapianPINVOKE.SWIGPendingException.Pending) throw XapianPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual string GetDescription() {
    string ret = (SwigDerivedClassHasMethod("GetDescription", swigMethodTypes11) ? XapianPINVOKE.PostingSource_GetDescriptionSwigExplicitPostingSource(swigCPtr) : XapianPINVOKE.PostingSource_GetDescription(swigCPtr));
    if (XapianPINVOKE.SWIGPendingException.Pending) throw XapianPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PostingSource Release() {
    global::System.IntPtr cPtr = XapianPINVOKE.PostingSource_Release(swigCPtr);
    PostingSource ret = (cPtr == global::System.IntPtr.Zero) ? null : new PostingSource(cPtr, false);
    if (XapianPINVOKE.SWIGPendingException.Pending) throw XapianPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("GetTermfreqMin", swigMethodTypes0))
      swigDelegate0 = new SwigDelegatePostingSource_0(SwigDirectorMethodGetTermfreqMin);
    if (SwigDerivedClassHasMethod("GetTermfreqEst", swigMethodTypes1))
      swigDelegate1 = new SwigDelegatePostingSource_1(SwigDirectorMethodGetTermfreqEst);
    if (SwigDerivedClassHasMethod("GetTermfreqMax", swigMethodTypes2))
      swigDelegate2 = new SwigDelegatePostingSource_2(SwigDirectorMethodGetTermfreqMax);
    if (SwigDerivedClassHasMethod("GetWeight", swigMethodTypes3))
      swigDelegate3 = new SwigDelegatePostingSource_3(SwigDirectorMethodGetWeight);
    if (SwigDerivedClassHasMethod("GetDocId", swigMethodTypes4))
      swigDelegate4 = new SwigDelegatePostingSource_4(SwigDirectorMethodGetDocId);
    if (SwigDerivedClassHasMethod("Next", swigMethodTypes5))
      swigDelegate5 = new SwigDelegatePostingSource_5(SwigDirectorMethodNext);
    if (SwigDerivedClassHasMethod("SkipTo", swigMethodTypes6))
      swigDelegate6 = new SwigDelegatePostingSource_6(SwigDirectorMethodSkipTo);
    if (SwigDerivedClassHasMethod("Check", swigMethodTypes7))
      swigDelegate7 = new SwigDelegatePostingSource_7(SwigDirectorMethodCheck);
    if (SwigDerivedClassHasMethod("AtEnd", swigMethodTypes8))
      swigDelegate8 = new SwigDelegatePostingSource_8(SwigDirectorMethodAtEnd);
    if (SwigDerivedClassHasMethod("Name", swigMethodTypes9))
      swigDelegate9 = new SwigDelegatePostingSource_9(SwigDirectorMethodName);
    if (SwigDerivedClassHasMethod("Init", swigMethodTypes10))
      swigDelegate10 = new SwigDelegatePostingSource_10(SwigDirectorMethodInit);
    if (SwigDerivedClassHasMethod("GetDescription", swigMethodTypes11))
      swigDelegate11 = new SwigDelegatePostingSource_11(SwigDirectorMethodGetDescription);
    XapianPINVOKE.PostingSource_director_connect(swigCPtr, swigDelegate0, swigDelegate1, swigDelegate2, swigDelegate3, swigDelegate4, swigDelegate5, swigDelegate6, swigDelegate7, swigDelegate8, swigDelegate9, swigDelegate10, swigDelegate11);
  }

  private bool SwigDerivedClassHasMethod(string methodName, global::System.Type[] methodTypes) {
    global::System.Reflection.MethodInfo[] methodInfos = this.GetType().GetMethods(
        global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.NonPublic | global::System.Reflection.BindingFlags.Instance);
    foreach (global::System.Reflection.MethodInfo methodInfo in methodInfos) {
      if (methodInfo.DeclaringType == null)
        continue;

      if (methodInfo.Name != methodName)
        continue;

      var parameters = methodInfo.GetParameters();
      if (parameters.Length != methodTypes.Length)
        continue;

      bool parametersMatch = true;
      for (var i = 0; i < parameters.Length; i++) {
        if (parameters[i].ParameterType != methodTypes[i]) {
          parametersMatch = false;
          break;
        }
      }

      if (!parametersMatch)
        continue;

      if (methodInfo.IsVirtual && (methodInfo.DeclaringType.IsSubclassOf(typeof(PostingSource))) &&
        methodInfo.DeclaringType != methodInfo.GetBaseDefinition().DeclaringType) {
        return true;
      }
    }

    return false;
  }

  private uint SwigDirectorMethodGetTermfreqMin() {
    return GetTermfreqMin();
  }

  private uint SwigDirectorMethodGetTermfreqEst() {
    return GetTermfreqEst();
  }

  private uint SwigDirectorMethodGetTermfreqMax() {
    return GetTermfreqMax();
  }

  private double SwigDirectorMethodGetWeight() {
    return GetWeight();
  }

  private uint SwigDirectorMethodGetDocId() {
    return GetDocId();
  }

  private void SwigDirectorMethodNext(double min_wt) {
    Next(min_wt);
  }

  private void SwigDirectorMethodSkipTo(uint did, double min_wt) {
    SkipTo(did, min_wt);
  }

  private bool SwigDirectorMethodCheck(uint did, double min_wt) {
    return Check(did, min_wt);
  }

  private bool SwigDirectorMethodAtEnd() {
    return AtEnd();
  }

  private string SwigDirectorMethodName() {
    return Name();
  }

  private void SwigDirectorMethodInit(global::System.IntPtr db) {
    Init(new Database(db, false));
  }

  private string SwigDirectorMethodGetDescription() {
    return GetDescription();
  }

  public delegate uint SwigDelegatePostingSource_0();
  public delegate uint SwigDelegatePostingSource_1();
  public delegate uint SwigDelegatePostingSource_2();
  public delegate double SwigDelegatePostingSource_3();
  public delegate uint SwigDelegatePostingSource_4();
  public delegate void SwigDelegatePostingSource_5(double min_wt);
  public delegate void SwigDelegatePostingSource_6(uint did, double min_wt);
  public delegate bool SwigDelegatePostingSource_7(uint did, double min_wt);
  public delegate bool SwigDelegatePostingSource_8();
  public delegate string SwigDelegatePostingSource_9();
  public delegate void SwigDelegatePostingSource_10(global::System.IntPtr db);
  public delegate string SwigDelegatePostingSource_11();

  private SwigDelegatePostingSource_0 swigDelegate0;
  private SwigDelegatePostingSource_1 swigDelegate1;
  private SwigDelegatePostingSource_2 swigDelegate2;
  private SwigDelegatePostingSource_3 swigDelegate3;
  private SwigDelegatePostingSource_4 swigDelegate4;
  private SwigDelegatePostingSource_5 swigDelegate5;
  private SwigDelegatePostingSource_6 swigDelegate6;
  private SwigDelegatePostingSource_7 swigDelegate7;
  private SwigDelegatePostingSource_8 swigDelegate8;
  private SwigDelegatePostingSource_9 swigDelegate9;
  private SwigDelegatePostingSource_10 swigDelegate10;
  private SwigDelegatePostingSource_11 swigDelegate11;

  private static global::System.Type[] swigMethodTypes0 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes1 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes2 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes3 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes4 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes5 = new global::System.Type[] { typeof(double) };
  private static global::System.Type[] swigMethodTypes6 = new global::System.Type[] { typeof(uint), typeof(double) };
  private static global::System.Type[] swigMethodTypes7 = new global::System.Type[] { typeof(uint), typeof(double) };
  private static global::System.Type[] swigMethodTypes8 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes9 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes10 = new global::System.Type[] { typeof(Database) };
  private static global::System.Type[] swigMethodTypes11 = new global::System.Type[] {  };
}

}
