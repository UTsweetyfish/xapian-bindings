//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.0
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Xapian {

public class ValuePostingSource : PostingSource {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal ValuePostingSource(global::System.IntPtr cPtr, bool cMemoryOwn) : base(XapianPINVOKE.ValuePostingSource_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ValuePostingSource obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(ValuePostingSource obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          XapianPINVOKE.delete_ValuePostingSource(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public ValuePostingSource(uint slot_) : this(XapianPINVOKE.new_ValuePostingSource(slot_), true) {
    if (XapianPINVOKE.SWIGPendingException.Pending) throw XapianPINVOKE.SWIGPendingException.Retrieve();
    SwigDirectorConnect();
  }

  public override uint GetTermfreqMin() {
    uint ret = (SwigDerivedClassHasMethod("GetTermfreqMin", swigMethodTypes0) ? XapianPINVOKE.ValuePostingSource_GetTermfreqMinSwigExplicitValuePostingSource(swigCPtr) : XapianPINVOKE.ValuePostingSource_GetTermfreqMin(swigCPtr));
    if (XapianPINVOKE.SWIGPendingException.Pending) throw XapianPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override uint GetTermfreqEst() {
    uint ret = (SwigDerivedClassHasMethod("GetTermfreqEst", swigMethodTypes1) ? XapianPINVOKE.ValuePostingSource_GetTermfreqEstSwigExplicitValuePostingSource(swigCPtr) : XapianPINVOKE.ValuePostingSource_GetTermfreqEst(swigCPtr));
    if (XapianPINVOKE.SWIGPendingException.Pending) throw XapianPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override uint GetTermfreqMax() {
    uint ret = (SwigDerivedClassHasMethod("GetTermfreqMax", swigMethodTypes2) ? XapianPINVOKE.ValuePostingSource_GetTermfreqMaxSwigExplicitValuePostingSource(swigCPtr) : XapianPINVOKE.ValuePostingSource_GetTermfreqMax(swigCPtr));
    if (XapianPINVOKE.SWIGPendingException.Pending) throw XapianPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void Next(double min_wt) {
    if (SwigDerivedClassHasMethod("Next", swigMethodTypes5)) XapianPINVOKE.ValuePostingSource_NextSwigExplicitValuePostingSource(swigCPtr, min_wt); else XapianPINVOKE.ValuePostingSource_Next(swigCPtr, min_wt);
    if (XapianPINVOKE.SWIGPendingException.Pending) throw XapianPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void SkipTo(uint min_docid, double min_wt) {
    if (SwigDerivedClassHasMethod("SkipTo", swigMethodTypes6)) XapianPINVOKE.ValuePostingSource_SkipToSwigExplicitValuePostingSource(swigCPtr, min_docid, min_wt); else XapianPINVOKE.ValuePostingSource_SkipTo(swigCPtr, min_docid, min_wt);
    if (XapianPINVOKE.SWIGPendingException.Pending) throw XapianPINVOKE.SWIGPendingException.Retrieve();
  }

  public override bool Check(uint min_docid, double min_wt) {
    bool ret = (SwigDerivedClassHasMethod("Check", swigMethodTypes7) ? XapianPINVOKE.ValuePostingSource_CheckSwigExplicitValuePostingSource(swigCPtr, min_docid, min_wt) : XapianPINVOKE.ValuePostingSource_Check(swigCPtr, min_docid, min_wt));
    if (XapianPINVOKE.SWIGPendingException.Pending) throw XapianPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool AtEnd() {
    bool ret = (SwigDerivedClassHasMethod("AtEnd", swigMethodTypes8) ? XapianPINVOKE.ValuePostingSource_AtEndSwigExplicitValuePostingSource(swigCPtr) : XapianPINVOKE.ValuePostingSource_AtEnd(swigCPtr));
    if (XapianPINVOKE.SWIGPendingException.Pending) throw XapianPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override uint GetDocId() {
    uint ret = (SwigDerivedClassHasMethod("GetDocId", swigMethodTypes4) ? XapianPINVOKE.ValuePostingSource_GetDocIdSwigExplicitValuePostingSource(swigCPtr) : XapianPINVOKE.ValuePostingSource_GetDocId(swigCPtr));
    if (XapianPINVOKE.SWIGPendingException.Pending) throw XapianPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void Init(Database db_) {
    if (SwigDerivedClassHasMethod("Init", swigMethodTypes10)) XapianPINVOKE.ValuePostingSource_InitSwigExplicitValuePostingSource(swigCPtr, Database.getCPtr(db_)); else XapianPINVOKE.ValuePostingSource_Init(swigCPtr, Database.getCPtr(db_));
    if (XapianPINVOKE.SWIGPendingException.Pending) throw XapianPINVOKE.SWIGPendingException.Retrieve();
  }

  public Database GetDatabase() {
    Database ret = new Database(XapianPINVOKE.ValuePostingSource_GetDatabase(swigCPtr), true);
    if (XapianPINVOKE.SWIGPendingException.Pending) throw XapianPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint GetSlot() {
    uint ret = XapianPINVOKE.ValuePostingSource_GetSlot(swigCPtr);
    if (XapianPINVOKE.SWIGPendingException.Pending) throw XapianPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string GetValue() {
    string ret = XapianPINVOKE.ValuePostingSource_GetValue(swigCPtr);
    if (XapianPINVOKE.SWIGPendingException.Pending) throw XapianPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Done() {
    XapianPINVOKE.ValuePostingSource_Done(swigCPtr);
    if (XapianPINVOKE.SWIGPendingException.Pending) throw XapianPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool GetStarted() {
    bool ret = XapianPINVOKE.ValuePostingSource_GetStarted(swigCPtr);
    if (XapianPINVOKE.SWIGPendingException.Pending) throw XapianPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetTermfreqMin(uint termfreq_min_) {
    XapianPINVOKE.ValuePostingSource_SetTermfreqMin(swigCPtr, termfreq_min_);
    if (XapianPINVOKE.SWIGPendingException.Pending) throw XapianPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetTermfreqEst(uint termfreq_est_) {
    XapianPINVOKE.ValuePostingSource_SetTermfreqEst(swigCPtr, termfreq_est_);
    if (XapianPINVOKE.SWIGPendingException.Pending) throw XapianPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetTermfreqMax(uint termfreq_max_) {
    XapianPINVOKE.ValuePostingSource_SetTermfreqMax(swigCPtr, termfreq_max_);
    if (XapianPINVOKE.SWIGPendingException.Pending) throw XapianPINVOKE.SWIGPendingException.Retrieve();
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("GetTermfreqMin", swigMethodTypes0))
      swigDelegate0 = new SwigDelegateValuePostingSource_0(SwigDirectorMethodGetTermfreqMin);
    if (SwigDerivedClassHasMethod("GetTermfreqEst", swigMethodTypes1))
      swigDelegate1 = new SwigDelegateValuePostingSource_1(SwigDirectorMethodGetTermfreqEst);
    if (SwigDerivedClassHasMethod("GetTermfreqMax", swigMethodTypes2))
      swigDelegate2 = new SwigDelegateValuePostingSource_2(SwigDirectorMethodGetTermfreqMax);
    if (SwigDerivedClassHasMethod("GetWeight", swigMethodTypes3))
      swigDelegate3 = new SwigDelegateValuePostingSource_3(SwigDirectorMethodGetWeight);
    if (SwigDerivedClassHasMethod("GetDocId", swigMethodTypes4))
      swigDelegate4 = new SwigDelegateValuePostingSource_4(SwigDirectorMethodGetDocId);
    if (SwigDerivedClassHasMethod("Next", swigMethodTypes5))
      swigDelegate5 = new SwigDelegateValuePostingSource_5(SwigDirectorMethodNext);
    if (SwigDerivedClassHasMethod("SkipTo", swigMethodTypes6))
      swigDelegate6 = new SwigDelegateValuePostingSource_6(SwigDirectorMethodSkipTo);
    if (SwigDerivedClassHasMethod("Check", swigMethodTypes7))
      swigDelegate7 = new SwigDelegateValuePostingSource_7(SwigDirectorMethodCheck);
    if (SwigDerivedClassHasMethod("AtEnd", swigMethodTypes8))
      swigDelegate8 = new SwigDelegateValuePostingSource_8(SwigDirectorMethodAtEnd);
    if (SwigDerivedClassHasMethod("Name", swigMethodTypes9))
      swigDelegate9 = new SwigDelegateValuePostingSource_9(SwigDirectorMethodName);
    if (SwigDerivedClassHasMethod("Init", swigMethodTypes10))
      swigDelegate10 = new SwigDelegateValuePostingSource_10(SwigDirectorMethodInit);
    if (SwigDerivedClassHasMethod("GetDescription", swigMethodTypes11))
      swigDelegate11 = new SwigDelegateValuePostingSource_11(SwigDirectorMethodGetDescription);
    XapianPINVOKE.ValuePostingSource_director_connect(swigCPtr, swigDelegate0, swigDelegate1, swigDelegate2, swigDelegate3, swigDelegate4, swigDelegate5, swigDelegate6, swigDelegate7, swigDelegate8, swigDelegate9, swigDelegate10, swigDelegate11);
  }

  private bool SwigDerivedClassHasMethod(string methodName, global::System.Type[] methodTypes) {
    global::System.Reflection.MethodInfo[] methodInfos = this.GetType().GetMethods(
        global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.NonPublic | global::System.Reflection.BindingFlags.Instance);
    foreach (global::System.Reflection.MethodInfo methodInfo in methodInfos) {
      if (methodInfo.DeclaringType == null)
        continue;

      if (methodInfo.Name != methodName)
        continue;

      var parameters = methodInfo.GetParameters();
      if (parameters.Length != methodTypes.Length)
        continue;

      bool parametersMatch = true;
      for (var i = 0; i < parameters.Length; i++) {
        if (parameters[i].ParameterType != methodTypes[i]) {
          parametersMatch = false;
          break;
        }
      }

      if (!parametersMatch)
        continue;

      if (methodInfo.IsVirtual && (methodInfo.DeclaringType.IsSubclassOf(typeof(ValuePostingSource))) &&
        methodInfo.DeclaringType != methodInfo.GetBaseDefinition().DeclaringType) {
        return true;
      }
    }

    return false;
  }

  private uint SwigDirectorMethodGetTermfreqMin() {
    return GetTermfreqMin();
  }

  private uint SwigDirectorMethodGetTermfreqEst() {
    return GetTermfreqEst();
  }

  private uint SwigDirectorMethodGetTermfreqMax() {
    return GetTermfreqMax();
  }

  private double SwigDirectorMethodGetWeight() {
    return GetWeight();
  }

  private uint SwigDirectorMethodGetDocId() {
    return GetDocId();
  }

  private void SwigDirectorMethodNext(double min_wt) {
    Next(min_wt);
  }

  private void SwigDirectorMethodSkipTo(uint min_docid, double min_wt) {
    SkipTo(min_docid, min_wt);
  }

  private bool SwigDirectorMethodCheck(uint min_docid, double min_wt) {
    return Check(min_docid, min_wt);
  }

  private bool SwigDirectorMethodAtEnd() {
    return AtEnd();
  }

  private string SwigDirectorMethodName() {
    return Name();
  }

  private void SwigDirectorMethodInit(global::System.IntPtr db_) {
    Init(new Database(db_, false));
  }

  private string SwigDirectorMethodGetDescription() {
    return GetDescription();
  }

  public delegate uint SwigDelegateValuePostingSource_0();
  public delegate uint SwigDelegateValuePostingSource_1();
  public delegate uint SwigDelegateValuePostingSource_2();
  public delegate double SwigDelegateValuePostingSource_3();
  public delegate uint SwigDelegateValuePostingSource_4();
  public delegate void SwigDelegateValuePostingSource_5(double min_wt);
  public delegate void SwigDelegateValuePostingSource_6(uint min_docid, double min_wt);
  public delegate bool SwigDelegateValuePostingSource_7(uint min_docid, double min_wt);
  public delegate bool SwigDelegateValuePostingSource_8();
  public delegate string SwigDelegateValuePostingSource_9();
  public delegate void SwigDelegateValuePostingSource_10(global::System.IntPtr db_);
  public delegate string SwigDelegateValuePostingSource_11();

  private SwigDelegateValuePostingSource_0 swigDelegate0;
  private SwigDelegateValuePostingSource_1 swigDelegate1;
  private SwigDelegateValuePostingSource_2 swigDelegate2;
  private SwigDelegateValuePostingSource_3 swigDelegate3;
  private SwigDelegateValuePostingSource_4 swigDelegate4;
  private SwigDelegateValuePostingSource_5 swigDelegate5;
  private SwigDelegateValuePostingSource_6 swigDelegate6;
  private SwigDelegateValuePostingSource_7 swigDelegate7;
  private SwigDelegateValuePostingSource_8 swigDelegate8;
  private SwigDelegateValuePostingSource_9 swigDelegate9;
  private SwigDelegateValuePostingSource_10 swigDelegate10;
  private SwigDelegateValuePostingSource_11 swigDelegate11;

  private static global::System.Type[] swigMethodTypes0 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes1 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes2 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes3 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes4 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes5 = new global::System.Type[] { typeof(double) };
  private static global::System.Type[] swigMethodTypes6 = new global::System.Type[] { typeof(uint), typeof(double) };
  private static global::System.Type[] swigMethodTypes7 = new global::System.Type[] { typeof(uint), typeof(double) };
  private static global::System.Type[] swigMethodTypes8 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes9 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes10 = new global::System.Type[] { typeof(Database) };
  private static global::System.Type[] swigMethodTypes11 = new global::System.Type[] {  };
}

}
